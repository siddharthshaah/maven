dependency management
For a java application we need external jar dependencies to be added to the classpath for compiling and executing an application. How to manage the dependencies for an application

#1 the developer/ops engineers can download the dependencies and can add manually to the classpath/buildpath of the project for compiling and running the application. but there are lot of problems with this approach
1.1 everyone in the team has to download the dependencies by performing a search and identifying them which takes lot of time
1.2 authenticity of the dependencies are not guaranteed
1.3 chances of landing up into legal or licensing issues as each individual can download their own set of dependencies
1.4 there is no control over which dependencies are being used, each member in the team might landup in downloading the different versions of the dependencies which will eventually endup in version mist-match in the code base
1.5 huge consumption of bandwidth space in repeatedly downloading the same libraries across the team 
1.6 we dont have any documentation in place describing which jars of what version are required for compiling and running the project, so the developers has to go through iterations of debugging the code in identifying the right versions of the dependencies to be used in the project

#2. To overcome the above problem the alternate is push/commit the libraries/dependencies into version control system.
(source code management repositories). it has its own drawbacks
2.1 multiple copies of the dependencies for muliple different projects will be repeatedly stored in the version control system due to which huge amount of storage will be wasted.
2.2 it takes more time for checkout/clone the project for building and deploying which contributes to the delay in development and delivery of the application
2.3 by keeping the jar dependencies in the source code management repository we endup in keeping multiple copies of the same jar with different versions which is not required.
	
From the above we can understand we need a proper dependency management technic in place to manage the project. So maven has introduced dependency management feature

How does maven dependency management works?
to manage and distribute the dependencies across the world, maven has introduced the concept of repositories. maven has hosted an repository called maven central repository
All the opensource contributors in the world can publish and make their dependencies discoverable through maven central repository, it acts as an market place for distributing the thier libraries.

How to uniquely identify a dependency from the another?
To uniquely identify and use a dependency from central repository maven has introduced dependency identification technic
For each dependency we want to publish in the maven central repository we need to associate gav coordinates for the artifact (anything that is placed in maven central repository)
groupId = organization to whom this artifact belongs to
artifactId = name of the dependency being published 
version = version of the aritfact

For eg.. the mysql-connector-java-8.12.jar file is published into maven central repository with
groupId=com.mysql
artifactId=mysql-connector-java
version=8.12
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	